/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */


/*
 You are given list of rooms. And each rooms stores keys for other rooms. You need to find if it is possible to visit all the rooms if we start from 1st room.


 Input
  [[1,2],[3],[1]]
  
  1-> 1,2
  2-> 3,
  3 -> 1
  
  VISITED [true,true,false,false]
  
 Output = true
  
 Input
  [[1,2],[1],[4],[2]]
  
 Output = false



1-> [1,2],
2-> [1],
3-> [4],
4-> [2]


*/


class Solution {
  public static void main(String[] args) {
    ArrayList<String> strings = new ArrayList<String>();
    strings.add("Hello, World!");
    strings.add("Welcome to CoderPad.");
    strings.add("This pad is running Java " + Runtime.version().feature());

    for (String string : strings) {
      System.out.println(string);
    }
    
    List<Integer> list = new ArrayList<>();
    // [[1,2],[1],[4],[2]]
    list.add(1);
    list.add(2);
    List<List<Integer>> rooms = new ArrayList<>();
    rooms.add(list);
    
    List<Integer> room2 = new ArrayList<>();
    room2.add(3);
    
    List<Integer> room3 = new ArrayList<>();
    room3.add(1);
    
    List<Integer> room4 = new ArrayList<>();
    room4.add(2);
    
    rooms.add(room2);
    rooms.add(room3);
    // rooms.add(room4);
    
    
    System.out.println("Result is :: "+checkRooms(rooms));
    
  }
  
  private static boolean checkRooms(List<List<Integer>> rooms) {
  
    // // [[1,2],[1],[4],[2]]
    
    if(rooms == null || rooms.size()==0) {
     return false; 
    }
    
    boolean visited[] = new boolean[rooms.size()];
    
    
    Queue<Integer> queue = new LinkedList<>();
    
    // [[1,2],[3],[1]]
    
  
    List<Integer> temp = rooms.get(0);
    
    for(int i=0;i<temp.size();i++) {
     
      queue.offer(temp.get(i));
    
    }

    // q -> [1,2];
    
    while(!queue.isEmpty()) {
    
      int size = queue.size();
      
      for(int j=0;j<size;j++) {
       
        int roomNo = queue.poll() -1; // [1]
        if(!visited[roomNo]) {
          visited[roomNo] = true; // [true,true,false]
        } else {
          continue;
        }
                
        List<Integer> keys = rooms.get(roomNo);
        
        for(int i=0;i<keys.size();i++) {
         
          queue.offer(keys.get(i));
        }
        
      }
    }
      
      for(int i=0;i<visited.length;i++) {
       
        if(!visited[i]) {
         return false; 
        }
      }
      
      return true;
      
    
    }
     

}
